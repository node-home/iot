// Generated by CoffeeScript 1.7.1
(function() {
  var Audio, Location, MediaThing, Motion, Orientation, Spot, Thing, Thingleton, Video, container, embed, object, socket, video,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.socket = socket = io('http://localhost:4444/spot');

  this.video = video = document.getElementById("video");

  this.embed = embed = document.getElementById("embed");

  this.object = object = document.getElementById("object");

  this.container = container = document.getElementById("container");

  Spot = (function() {
    function Spot() {}

    Spot.things = {};

    Spot.sockets = [];

    Spot.agent = {
      name: 'Chrome',
      version: 'Something'
    };

    Spot.init = function() {
      Video.init();
      Audio.init();
      Location.init();
      Motion.init();
      return Orientation.init();
    };

    Spot.addThing = function(thing) {
      var _base, _name;
      if ((_base = Spot.things)[_name = thing.name] == null) {
        _base[_name] = {};
      }
      return Spot.things[thing.serial] = thing;
    };

    Spot.removeThing = function(thingOrName, serial) {
      if (serial) {
        return delete Spot.things[thingOrName][serial];
      } else {
        return delete Spot.things[thingOrName.constructor.name][thingOrName.serial];
      }
    };

    Spot.getState = function() {
      var name, serial, serials, things, _ref, _results;
      things = {};
      _ref = Spot.things;
      _results = [];
      for (name in _ref) {
        serials = _ref[name];
        _results.push(things[name] = ((function() {
          var _results1;
          _results1 = [];
          for (serial in serials) {
            _results1.push(serial);
          }
          return _results1;
        })()).sort());
      }
      return _results;
    };

    Spot.getThingState = function(name, serial) {
      return this.things[name][serial].getState();
    };

    return Spot;

  })();

  Thing = (function() {
    Thing.name = 'thing';

    Thing.serial = 0;

    Thing.broadcastInterval = 0;

    Thing.unique = false;

    function Thing() {
      this.update = __bind(this.update, this);
      this.serial = this.constructor.serial += 1;
      this.update();
      if (this.broadcastInterval) {
        this.interval = setInterval(this.update, this.broadcastInterval);
      }
    }

    Thing.prototype.update = function() {
      return socket.emit(this.constructor.name + ':update', Promise.resolve(this.getState()));
    };

    Thing.prototype.getState = function() {
      return {
        error: 'Not implemented'
      };
    };

    return Thing;

  })();

  Thingleton = (function() {
    function Thingleton() {
      this.getState = __bind(this.getState, this);
    }

    Thingleton.autoBroadcast = true;

    Thingleton.state = void 0;

    Thingleton.prototype.getState = function() {
      return this.constructor.state;
    };

    Thingleton.broadcast = function(state) {
      return socket.emit("" + Thingleton.name + ":state", state != null ? state : Thingleton.state);
    };

    Thingleton.updateState = function(state) {
      console.log(Thingleton.name, {
        state: state
      });
      Thingleton.state = state;
      if (Thingleton.autoBroadcast) {
        return Thingleton.broadcast();
      }
    };

    return Thingleton;

  })();

  Location = (function(_super) {
    __extends(Location, _super);

    function Location() {
      return Location.__super__.constructor.apply(this, arguments);
    }

    Location.name = 'location';

    Location.init = function() {
      if (Location.autobroadcast) {
        return watchPosition(Location.updateState);
      }
    };

    Location.getState = function() {
      return navigator.geolocation.getCurrentPosition(Promise.resolve);
    };

    return Location;

  })(Thingleton);

  Orientation = (function(_super) {
    __extends(Orientation, _super);

    function Orientation() {
      return Orientation.__super__.constructor.apply(this, arguments);
    }

    Orientation.name = 'orientation';

    Orientation.init = function() {
      return window.addEventListener('deviceorientation', Orientation.updateState);
    };

    return Orientation;

  })(Thingleton);

  Motion = (function(_super) {
    __extends(Motion, _super);

    function Motion() {
      return Motion.__super__.constructor.apply(this, arguments);
    }

    Motion.name = 'motion';

    Motion.init = function() {
      return window.addEventListener('devicemotion', Motion.updateState);
    };

    return Motion;

  })(Thingleton);

  MediaThing = (function(_super) {
    __extends(MediaThing, _super);

    function MediaThing(id) {
      this.$el = $(id);
      this.el = this.$el[0];
      this.player = this.$el.mediaelementplayer();
      this.history = [];
      this.historyIndex = -1;
      MediaThing.__super__.constructor.call(this);
    }

    MediaThing.prototype.play = function(src) {
      if (src) {
        this.player.pause();
        this.player.setSrc(src);
      }
      return this.player.play();
    };

    return MediaThing;

  })(Thing);

  Audio = (function(_super) {
    __extends(Audio, _super);

    Audio.init = function() {
      return $('audio').each(function() {
        return new Audio(this);
      });
    };

    Audio.prototype.getState = function() {
      return {
        id: this.serial,
        formats: {
          wav: this.el.canPlayType("audio/wave"),
          ogg: this.el.canPlayType("audio/ogg"),
          mp3: this.el.canPlayType("audio/mpeg")
        },
        playing: false,
        duration: this.player.duration,
        currentTime: this.player.currentTime,
        history: this.history
      };
    };

    function Audio() {
      Audio.__super__.constructor.call(this);
      socket.on('play_audio', (function(_this) {
        return function(_arg) {
          var src;
          src = _arg.src;
          return _this.play(src);
        };
      })(this));
    }

    return Audio;

  })(MediaThing);

  Video = (function(_super) {
    __extends(Video, _super);

    function Video() {
      return Video.__super__.constructor.apply(this, arguments);
    }

    Video.init = function() {
      return $('video').each(function() {
        return new Video(this);
      });
    };

    Video.prototype.getState = function() {
      return {
        id: this.serial,
        width: this.$el.width(),
        height: this.$el.height(),
        formats: {
          wav: this.el.canPlayType("audio/wave"),
          mp3: this.el.canPlayType("audio/mpeg")
        },
        playing: false,
        duration: this.player.duration,
        currentTime: this.player.currentTime,
        history: this.history
      };
    };

    Video.prototype.constuctor = function() {
      Video.__super__.constuctor.call(this);
      return socket.on('play_video', (function(_this) {
        return function(_arg) {
          var src;
          src = _arg.src;
          return _this.play(src);
        };
      })(this));
    };

    return Video;

  })(MediaThing);

  this.requestAudio = function() {
    return socket.emit('request_audio');
  };

  this.requestVideo = function() {
    return socket.emit('request_video');
  };

  Spot.init();

}).call(this);
